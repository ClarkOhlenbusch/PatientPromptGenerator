Please refactor the “Prompt Editing” feature so that any changes I make in the sandbox textarea:

1. Are **saved** to our storage layer (e.g. `patient_prompts` table or in‑memory session store) keyed by batchId + patientId.
2. Are **loaded** and displayed as the current template whenever I open the sandbox for that patient.
3. Are **used** by the regenerate API endpoint when I click “Regenerate Prompt”—i.e., instead of falling back to the original default, read the saved template and pass that string (with placeholders) into our OpenAI call in `openai.ts`.

### Detailed Tasks

1. **Persist the Edited Template**  
   - In the “Save Template” button handler, send a `POST /api/prompt-template` with `{ batchId, patientId, template }`.  
   - Implement that endpoint to `upsert` into `patient_prompts` (or sessionStore).

2. **Load the Template**  
   - When the sandbox page mounts (and when batch/patient selection changes), call `GET /api/prompt-template?batchId=…&patientId=…`.  
   - Populate the textarea with the returned `template` or fall back to the default if none saved.

3. **Regenerate Uses Saved Template**  
   - Change `/api/regenerate` (in `openai.ts`) to accept `{ batchId, patientId }` (no `template` payload).  
   - Inside that handler, query the saved template.  
   - Pass it into your prompt‑builder function instead of a constant. Example:
     ```ts
     const { template } = await storage.getPromptTemplate(batchId, patientId);
     const finalPrompt = buildPromptFromTemplate(template, data);
     const response = await openai.createCompletion({ prompt: finalPrompt, … });
     ```
4. **Sanitize & Validate**  
   - Before saving and before sending to OpenAI, strip out any dangerous characters or overly long inputs (max length ~1,000 chars).  
   - Ensure placeholders `{name}`, `{age}`, etc. remain in the string.

5. **UI Feedback**  
   - After “Save Template,” show a toast/snackbar: “Template saved.”  
   - After “Regenerate Prompt,” display the newly generated text in the “Current Generated Prompt” area.

### Outcome

- The textbox always reflects the **true** template for that patient.  
- Clicking “Regenerate” uses **that** template.  
- Edits persist across page reloads, but only for the selected batch & patient.  
- You avoid hard‑coded defaults in `openai.ts`; everything is data‑driven.

Please implement these changes end‑to‑end and verify in staging that edits now flow through to the regenerated prompt below the sandbox.
