I’m working on a Next.js/Vercel app that:

1. Lets caretakers upload patient Excel data
2. Runs daily AI‑Powered Triage (SMS via Twilio)
3. Generates Monthly Patient Health Reports (PDF via Puppeteer/pdfmake)

Right now:

- Downloading the monthly report throws:  
  `ExcelJS.Workbook is not a constructor`
- Triage shows 30 “Pending Alerts” but only 6 patients were ever uploaded
- All new pages (“Upload Data”, “Triage”, “Monthly Reports”) just display placeholder data

**Please fix all of this by:**

1. **Correcting the ExcelJS import & instantiation**  
   - Ensure the PDF‑generation and Excel parsing code lives in a **server‑side API route** (e.g. `/pages/api/monthly-report.ts`) so Node modules work.  
   - Change the import to:  
     ```ts
     import { Workbook } from 'exceljs';
     // …
     const workbook = new Workbook();
     await workbook.xlsx.load(buffer);
     ```
   - Remove any client‑side references to ExcelJS.

2. **Persisting uploaded data**  
   - Add a simple database (e.g. PostgreSQL + Prisma, or MongoDB) with tables/collections for:  
     - **patients** (patientId, name, dob, etc.)  
     - **measurements** (patientId, variable, value, timestamp, isAlert)  
     - **reports** (patientId, triageText, monthlyPdfUrl, lastGeneratedAt)  
   - Wire your **Upload Data** page (`POST /api/upload`) to parse the XLSX (using your refactored `excelProcessor.ts`), then **upsert** all rows into the DB instead of discarding them.

3. **Driving real data into Triage & Reports**  
   - Update `/api/triage` to **query** `measurements` where `isAlert=true` **and** today’s date, build your 100‑word Alexa prompt per patient, send via Twilio, and record each send so you don’t duplicate.  
   - Update `/api/monthly-report` to **query** the past 30 days of `measurements`, compute compliance & trends, then generate the PDF. Return a valid PDF URL in the JSON response.

4. **Front‑end integration**  
   - On **Upload Data**, show a success/error after you call `/api/upload`.  
   - On **Triage**, fetch from `/api/triage` and render the real alerts list.  
   - On **Monthly Reports**, fetch from `/api/monthly-report`, display the generated PDF link, and let the user download.

5. **Testing**  
   - Include automated tests for:  
     - Excel upload → DB insertion (e.g. using a sample XLSX)  
     - `/api/triage` returns the correct alert count  
     - `/api/monthly-report` returns a valid PDF buffer or URL  
   - Confirm that after upload, triage shows exactly the number of alert‑rows, and monthly report download no longer errors.

Please update the code accordingly, explain each change in comments, and provide any new schema or migration files needed. Let me know once I can upload my demo XLSX and see **all** patients preserved, **all** alerts sent, and a working PDF download. Thanks!
